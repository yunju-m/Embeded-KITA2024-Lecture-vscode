// 정규표현식 (Regular Expression)
// * 패턴과 플래그로 구성된 문자열에서 서브문자열을 탐색하기 위한 표현식
// * // : 정규 표현식 리터럴
// * '/패턴/플래그' 문법을 사용

// 1) 아이디 : 문자로 시작하고 문자 또는 숫자 또는 _만 허용
//              최소 8자리 최대 12자리 이하로 된 패턴
const strId = 'abdd1234';
const reId = /^[A-Za-z]\w{7,11}$/;
console.log(reId.test(strId));

// 2) 주민번호 : 숫자 6자리-숫자 7자리
//              년도 2자리 월 2자리 일2자리 - 성별 숫자 (1~4) 숫자 6개
const strSno = '991121-3013351';
const reSno = /^\d{2}([0]{1}[1-9]{1}|[1]{1}[0-2]{1})([0]{1}[1-9]|[1-2]{1}[0-9]{1}|[3]{1}[0-1]{1})-[1-4]{1}\d{6}$/;
console.log(reSno.test(strSno));

// 3) IP(아이피주소) : 숫자 1~3자리.숫자 1~3자리.숫자 1~3자리.숫자 1~3자리
//                      숫자는 0~255로 제한
const strIp = '233.252.244.254';
const reIp = /^([0-9]{1}|[1-9]{1}[0-9]{1}|[1-2]{1}[0-9]{1}[0-5]{1})[\.]([0-9]{1}|[1-9]{1}[0-9]{1}|[1-2]{1}[0-9]{1}[0-5]{1})[\.]([0-9]{1}|[1-9]{1}[0-9]{1}|[1-2]{1}[0-9]{1}[0-5]{1})[\.]([0-9]{1}|[1-9]{1}[0-9]{1}|[1-2]{1}[0-9]{1}[0-5]{1})$/;
console.log(reIp.test(strIp));


// 정답 테스트
// 1) 아이디 : 문자로 시작하고 문자 또는 숫자 또는 _만 허용
//             최소 8자리 최대 12자리
const strId2 = 'abcd12dsfsff';
const reId2 = /^[A-Za-z]\w{7,11}$/;
console.log(reId2.test(strId2));


// 2) 주민번호 : 숫자6자리-숫자7자리
//              년도2자리월2자리일2자리-성별숫자(1~4)숫자6개
const strSno2 = '990931-1234567';
const reSno2 = /^\d{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])-[1-4]\d{6}$/;
console.log(reSno2.test(strSno2));


// 3) 아이피주소 : 숫자1~3자리.숫자1~3자리.숫자1~3자리.숫자1~3자리
//                숫자는 0~255로 제한
const strIp2 = '127.0.0.1';
const reIp2 = /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$/;
console.log(reIp.test(strIp));